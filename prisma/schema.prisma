// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  username     String   @unique
  firstName    String
  lastName     String
  email        String   @unique
  password     String
  phone        String   @unique @db.VarChar(10)
  role         Role
  profileImage String?  @db.Text
  status       Status   @default(ACTIVE)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  store        Store?
  order        Order[]
}

enum Status {
  ACTIVE
  INACTIVE
}

enum Role {
  ADMIN
  CUSTOMER
  OWNER
}

model CategoryRestaurant {
  id    Int     @id @default(autoincrement())
  name  String
  store Store[]
}

model Store {
  id                   Int                @id @default(autoincrement())
  name                 String             @unique
  address              String
  profileImage         String?            @db.Text
  status               Status             @default(ACTIVE)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId               Int                @unique
  menu                 Menu[]
  Order                Order[]
  categoryrestaurant   CategoryRestaurant @relation(fields: [categoryRestaurantId], references: [id], onDelete: Cascade)
  categoryRestaurantId Int
}

model Category {
  id   Int    @id @default(autoincrement())
  name String
  menu Menu[]
}

model Menu {
  id         Int         @id @default(autoincrement())
  name       String
  price      Decimal     @db.Decimal(10, 2)
  image      String?     @db.Text
  status     Status      @default(ACTIVE)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  category   Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int
  store      Store       @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId    Int
  orderItem  OrderItem[]
}

model Order {
  id         Int         @id @default(autoincrement())
  status     OrderStatus @default(PENDING)
  date       DateTime    @default(now())
  totalPrice Decimal     @db.Decimal(10, 2)
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  store      Store       @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId    Int
  orderItem  OrderItem[]
}

enum OrderStatus {
  DONE
  CONFIRM
  PENDING
  CANCEL
}

model OrderItem {
  id       Int   @id @default(autoincrement())
  quantity Int
  menu     Menu  @relation(fields: [menuId], references: [id], onDelete: Cascade)
  menuId   Int
  order    Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId  Int
}
